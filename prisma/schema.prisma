generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  role Role @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tickets Ticket[]
  address Address[]
  payments Payment[]
}

enum Role {
  USER
  ADMIN
}

model Address {
  id  String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  cep String
  estado String
  cidade String
  bairro String
  rua String
  numero String
  complemento String?
  latitude Float?
  longitude Float?
  createdAt DateTime @default(now())
}

model Movie {
  id String @id @default(uuid())
  title String
  synopsis String
  posterUrl String
  backdropUrl String
  trailerUrl String?
  duration Int
  releaseDate DateTime
  classification String
  genres String[]
  rating Float?
  isComingSoon Boolean @default(false)
  sessions Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cinema {
  id String @id @default(uuid())
  name String
  address String
  location Json
  rooms Room[]
  sessions Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id String @id @default(uuid())
  name String
  cinemaId String
  cinema Cinema @relation(fields: [cinemaId], references: [id])
  rows Int
  seatsPerRow Int
  sessions Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id String @id @default(uuid())
  movieId String
  movie Movie @relation(fields: [movieId], references: [id])
  cinemaId String
  cinema Cinema @relation(fields: [cinemaId], references: [id])
  roomId String
  room Room @relation(fields: [roomId], references: [id])
  date DateTime
  time String
  seats Seat[]
  tickets Ticket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seat {
  id String @id @default(uuid())
  sessionId String
  session Session @relation(fields: [sessionId], references: [id])
  row String
  number Int
  status SeatStatus @default(AVAILABLE)
  reservation String?
  ticketId String?
  ticket Ticket? @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SeatStatus {
  AVAILABLE
  RESERVED
  OCCUPIED
}

model Ticket {
  id String @id @default(uuid())
  sessionId String
  session Session @relation(fields: [sessionId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  seats Seat[]
  type TicketType
  price Float
  qrCode String
  purchaseId String
  status TicketStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  payments Payment[]
}

enum TicketType {
  ADULT
  CHILD
  SENIOR
  STUDENT
}

enum TicketStatus {
  ACTIVE
  USED
  CANCELLED
}

model Payment {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  amount Float
  method PaymentMethod
  status PaymentStatus @default(PENDING)
  installments Int?
  cardLLastFour String?
  pixCode String?
  pixQrCode String?
  tickets Ticket[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentMethod {
  CREDIT
  DEBIT
  PIX
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Promotion {
  id String @id @default(uuid())
  title String
  description String
  discount Float @default(0)
  code String @unique
  validFrom DateTime
  validUntil DateTime
  isActive Boolean @default(true)
  applicableMovies String[] @default([])
  applicableCinemas String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
  @@index([isActive])
  @@index([validFrom])
  @@index([validUntil])
}
